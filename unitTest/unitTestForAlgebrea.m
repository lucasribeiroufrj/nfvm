% Path to a dummy mesh
meshPath = ...
    [ ...
        '..' filesep 'problems' filesep '+azevedo'  filesep ...
        '@Uniaxial' filesep 'meshes' filesep 'unitCube3x3x3' ...
    ];

mesh = fvmReadOpenFoamMesh(meshPath);

disp('==========================================')
disp('=             Mesh loaded                =')
disp('==========================================')
mesh %#ok<NOPTS>
disp('==========================================')

for iBoundary = 1:mesh.numberOfBoundaries
    %mesh.boundaries(iBoundary).type = 'zeroDisplacement';
    mesh.boundaries(iBoundary).type = 'calculated';
end

checkFieldConstructors(mesh);

nVolElements = mesh.numberOfElements + mesh.numberOfBElements;
nSurElements = mesh.numberOfFaces;

rawVolScaField = scalarField(nVolElements);
rawVolVecField = vectorField(nVolElements);
rawVolTenField = tensorField(nVolElements);
rawSurScaField = scalarField(nSurElements);
rawSurVecField = vectorField(nSurElements);
rawSurTenField = tensorField(nSurElements);

rawVolScaField(1:end) = rand(1,nVolElements);
rawVolVecField(1:end) = rand(3,nVolElements);
rawVolTenField(1:end) = rand(3,3,nVolElements);
rawSurScaField(1:end) = rand(1,nSurElements);
rawSurVecField(1:end) = rand(3,nSurElements);
rawSurTenField(1:end) = rand(3,3,nSurElements);

volScaField = checkBoundaryAccess(mesh, rawVolScaField, 'volScalarField', 'Scalar');
volVecField = checkBoundaryAccess(mesh, rawVolVecField, 'volVectorField', 'Vector');
volTenField = checkBoundaryAccess(mesh, rawVolTenField, 'volTensorField', 'Tensor');
surScaField = checkBoundaryAccess(mesh, rawSurScaField, 'surfaceScalarField', 'Scalar');
surVecField = checkBoundaryAccess(mesh, rawSurVecField, 'surfaceVectorField', 'Vector');
surTenField = checkBoundaryAccess(mesh, rawSurTenField, 'surfaceTensorField', 'Tensor');

rawFields = ...
    {...
        rawVolScaField, rawVolVecField, rawVolTenField,...
        rawSurScaField, rawSurVecField, rawSurTenField,...
    }; 

fields = ...
    {...
        volScaField, volVecField, volTenField,...
        surScaField, surVecField, surTenField,...
    };

checkBoundaryIndexing...
    (...
        fields,...
        mesh.numberOfBoundaries...
    );

checkImpossibleOperations...
    (...
        rawFields,...
        fields...
    );

checkBasicPossibleOperations...
    (...
        rawFields,...
        fields...
    );

checkPossibleBinaryOperations...
    (...
        {rawVolScaField, rawVolTenField},...
        {volScaField, volTenField},...
        {'Tensor'},...
        {...
            @(lhs, rhs) sprintf('%s * %s', lhs, rhs)...
        }...
    );

checkPossibleBinaryOperations...
    (...
        {rawSurScaField, rawSurTenField},...
        {surScaField, surTenField},...
        {'Tensor'},...
        {...
            @(lhs, rhs) sprintf('%s * %s', lhs, rhs)...
        }...
    );

checkPossibleBinaryOperations...
    (...
        {rawVolScaField, rawVolVecField},...
        {volScaField, volVecField},...
        {'Vector'},...
        {...
            @(lhs, rhs) sprintf('%s * %s', lhs, rhs)...
        }...
    );

checkPossibleBinaryOperations...
    (...
        {rawSurScaField, rawSurVecField},...
        {surScaField, surVecField},...
        {'Vector'},...
        {...
            @(lhs, rhs) sprintf('%s * %s', lhs, rhs)...
        }...
    );
%% Scalar
%checkIfPasses(@() ( vScaField / vScaField ), msg) % NOT IMPLEMENTED
checkPossibleBinaryOperations...
    (...
        {rawVolScaField, 2},...
        {volScaField, 2},...
        {'Scalar'},...
        {...
            @(lhs, rhs) sprintf('%s^%s', lhs, rhs)...
        }...
    );

checkPossibleBinaryOperations...
    (...
        {rawSurScaField, 2},...
        {surScaField, 2},...
        {'Scalar'},...
        {...
            @(lhs, rhs) sprintf('%s^%s', lhs, rhs)...
        }...
    );
%%

%% Vectors
%checkIfPasses(@() ( vVecField / vScaField ), msg) % NOT IMPLEMENTED

%% BEG - Tensors
%
checkPossibleBinaryOperations...
    (...
        {rawVolTenField, rawVolTenField},...
        {volTenField, volTenField},...
        {'Tensor'},...
        {...
            @(lhs, rhs) sprintf('%s * %s', lhs, rhs)...
        }...
    );

checkPossibleBinaryOperations...
    (...
        {rawSurTenField, rawSurTenField},...
        {surTenField, surTenField},...
        {'Tensor'},...
        {...
            @(lhs, rhs) sprintf('%s * %s', lhs, rhs)...
        }...
    );

checkPossibleBinaryOperations...
    (...
        {rawVolTenField, rawVolScaField},...
        {volTenField, volScaField},...
        {'Tensor'},...
        {...
            @(lhs, rhs) sprintf('%s * %s', lhs, rhs)...
        }...
    );

checkPossibleBinaryOperations...
    (...
        {rawVolTenField, rawVolScaField},...
        {volTenField, volScaField},...
        {'Tensor'},...
        {...
            @(lhs, rhs) sprintf('%s * %s', lhs, rhs)...
        }...
    );

checkPossibleBinaryOperations...
    (...
        {rawVolTenField, rawVolVecField},...
        {volTenField, volVecField},...
        {'Vector'},...
        {...
            @(lhs, rhs) sprintf('%s * %s', lhs, rhs)...
        }...
    );

checkPossibleBinaryOperations...
    (...
        {rawSurTenField, rawSurVecField},...
        {surTenField, surVecField},...
        {'Vector'},...
        {...
            @(lhs, rhs) sprintf('%s * %s', lhs, rhs)...
        }...
    );

checkPossibleUnaryOperations...
    (...
        rawVolTenField,...
        volTenField,...
        {'Tensor', 'Scalar', 'Tensor', 'Scalar'},...
        {...
            @(lhs) sprintf('%s.transpose()', lhs),...
            @(lhs) sprintf('%s.trace()', lhs),...
            @(lhs) sprintf('%s.inv()', lhs),...
            @(lhs) sprintf('%s.det()', lhs),...
        }...
    );

checkPossibleUnaryOperations...
    (...
        rawSurTenField,...
        surTenField,...
        {'Tensor', 'Scalar', 'Tensor', 'Scalar'},...
        {...
            @(lhs) sprintf('%s.transpose()', lhs),...
            @(lhs) sprintf('%s.trace()', lhs),...
            @(lhs) sprintf('%s.inv()', lhs),...
            @(lhs) sprintf('%s.det()', lhs),...
        }...
    );

checkEigensImplementation...
    (...
        rawSurTenField,...
        surTenField,...
        'Tensor'...
    );

checkEigensImplementation...
    (...
        rawVolTenField,...
        volTenField,...
        'Tensor'...
    );

%checkIfPasses(@() ( vTenField / vScaField ), msg) % NOT IMPLEMENTED
%% END

disp('==========================================')
disp('=          Unit test finished!           =')
disp('==========================================')
